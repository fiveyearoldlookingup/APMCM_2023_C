##pyhon
##Conduct ADF test, difference test and Granger test on the sales volume and main factors of the first question.
##Conduct ADF test, difference test and Granger test on the traditional car sales volume and main factors in the third question.
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.stattools import adfuller, grangercausalitytests
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import matplotlib.pyplot as plt

# Download Data
data = pd.read_excel('E:/科研程序/代码/vscode/亚太杯/亚太杯/第一题/Standardized.xlsx')  #Excel can be changed

# Data preprocessing
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Extract key columns
sales_volume = data['Global traditional energy vehicle sales']          #Changing column names that require Granger causality testing
infrastructure = data['ZH Sales volume']#Changing column names that require Granger causality testing

# Functions: Check stationarity and differencing
def make_stationary(series):
    adf_test = adfuller(series.dropna())
    print(f'ADF Statistic: {adf_test[0]}')
    print(f'p-value: {adf_test[1]}')

    if adf_test[1] > 0.05:
        # Try first differences
        series_diff = series.diff().dropna()
        adf_test_diff = adfuller(series_diff)
        print(f'ADF Statistic (1st diff): {adf_test_diff[0]}')
        print(f'p-value (1st diff): {adf_test_diff[1]}')

        if adf_test_diff[1] > 0.05:
            # Try second difference
            series_diff = series_diff.diff().dropna()
            adf_test_diff = adfuller(series_diff)
            print(f'ADF Statistic (2nd diff): {adf_test_diff[0]}')
            print(f'p-value (2nd diff): {adf_test_diff[1]}')
            return series_diff
        else:
            return series_diff
    else:
        return series

# Check stationarity and make necessary differences
sales_volume_stationary = make_stationary(sales_volume)
infrastructure_stationary = make_stationary(infrastructure)

# Combine the data again for Granger causality testing
combined_data_stationary = pd.concat([sales_volume_stationary, infrastructure_stationary], axis=1).dropna()


# Export smoothed data to Excel
combined_data_stationary.to_excel('E:/科研程序/代码/vscode/亚太杯/亚太杯/第一题/TimeStationaryData.xlsx')


# Perform Granger causality test
granger_test_result = grangercausalitytests(combined_data_stationary, maxlag=12, verbose=False)

# Extract P-value for Granger causality test
p_values = {lag: min(test[1] for test in result[0].values()) for lag, result in granger_test_result.items()}

# Plot a P-value bar chart
plt.figure(figsize=(8, 4))
plt.bar(p_values.keys(), p_values.values(), color='skyblue')
plt.xlabel('Lags')
plt.ylabel('P-Value')
plt.title('Granger Causality Test Results (P-Values)')
plt.axhline(y=0.05, color='red', linestyle='--')  # Significance level line
plt.show()
import seaborn as sns
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Perform Granger causality test and obtain P value
maxlag = 12
test_results = grangercausalitytests(combined_data_stationary, maxlag=maxlag, verbose=False)

# Extract the P-value for a specific test (e.g. ssr_ftest)
p_values = np.zeros(maxlag)
for i in range(maxlag):
    p_values[i] = test_results[i+1][0]['ssr_ftest'][1]  # Here the p value of ssr based on F test is used
    

# Draw heat map
plt.figure(figsize=(10, 5))
sns.heatmap([p_values], annot=True, cmap='coolwarm', cbar_kws={'label': 'P-Value'})
plt.title('Granger Causality Test P-Values (ssr_ftest)')
plt.xlabel('Lag')
plt.xticks(np.arange(0.5, maxlag + 0.5), np.arange(1, maxlag + 1))
plt.yticks([])
plt.show()
print(p_values)